#########################################################
## 'Validate module with PSRule' Pipeline Template     ##
#########################################################
##
## This pipeline template contains the logic to validate a given module's testfile with PSRule
##
##
########################################################
##
##---------------------------------------------##
## TEMPLATE PARAMETERS                         ##
##---------------------------------------------##
##
## By default it uses the variables specified in the below [parameters] section. However, you can overwrite these variables in the
##    referencing pipeline by providing the parameter explicitly.
##
## NOTE: If you don't need to overwrite a shared value, you can IGNORE this section
##
##   |============================================================================================================================================================================================================================================|
##   | Parameter                       | Default Value                        | Description                                                                                               | Example                                               |
##   |---------------------------------|--------------------------------------|-----------------------------------------------------------------------------------------------------------|-------------------------------------------------------|
##   | serviceConnection               | '$(serviceConnection)'               | The service connection that connects to Azure.                                                            | 'demo-internal'                                       |
##   | poolName                        | '$(poolName)'                        | You can provide either a [poolname] or [vmImage] to run the job on.                                       | 'Custom Deployment Pool'                              |
##   | vmImage                         | '$(vmImage)'                         | You can provide either a [poolname] or [vmImage] to run the job on.                                       | 'ubuntu20.04'                                         |
##   | defaultJobTimeoutInMinutes      | 120                                  | The timeout for the job in this pipeline.                                                                 | 120                                                   |
##   | customParameterFileTokens       | ''                                   |                                                                                                           |                                                       |
##   | modulePath                      | '$(modulePath)'                      | The path to the module to deploy.                                                                         | 'c:/KeyVault'                                         |
##   | resourceGroupName               | '$(resourceGroupName)'               | The resourcegroup to deploy into. Required only for Resource-Group-Level deployments.                     | 'validation-rg'                                       |
##   | subscriptionId                  | '$(ARM_SUBSCRIPTION_ID)'             | The id of the subscription to deploy into when using a Management group service connection.               | 'aed7c000-6387-412e-bed0-24dfddf4bbc6'                |
##   | managementGroupId               | '$(ARM_MGMTGROUP_ID)'                | The id of the management group to deploy into. Required only for Management-Group-Level deployments.      | '6ycc9620-cb01-454f-9ebc-fc6b1df48d64'                |
##   | azurePowerShellVersion          | '$(azurePowerShellVersion)'          | Used for configuring the Azure PowerShellModules Version, one of the example values.                      | 'latestVersion' or 'OtherVersion'                     |
##   | preferredAzurePowerShellVersion | '$(preferredAzurePowerShellVersion)' | Used for configuring the Azure PowerShellModules Version, either an empty string or the specific version. | '4.4.0'                                               |
##   |============================================================================================================================================================================================================================================|
##
##---------------------------------------------##

parameters:
  # Pipeline-related parameters
  serviceConnection: '$(serviceConnection)'
  poolName: '$(poolName)'
  vmImage: '$(vmImage)'
  defaultJobTimeoutInMinutes: 120
  # Logic-related parameters
  customParameterFileTokens: ''
  modulePath: '$(modulePath)'
  resourceGroupName: '$(resourceGroupName)'
  subscriptionId: '$(ARM_SUBSCRIPTION_ID)'
  managementGroupId: '$(ARM_MGMTGROUP_ID)'
  # Azure PowerShell Version parameters
  azurePowerShellVersion: '$(azurePowerShellVersion)'
  preferredAzurePowerShellVersion: '$(preferredAzurePowerShellVersion)'

##---------------------------------------------##
## TEMPLATE LOGIC                              ##
##---------------------------------------------##
jobs:
  - template: /.azuredevops/pipelineTemplates/jobs.getModuleTestFiles.yml
  - job: deploy
    displayName: 'Run PSRule on ' # Auto-populated
    timeoutInMinutes: ${{ parameters.defaultJobTimeoutInMinutes }}
    pool:
      ${{ if ne(parameters.vmImage, '') }}:
        vmImage: ${{ parameters.vmImage }}
      ${{ if ne(parameters.poolName, '') }}:
        name: ${{ parameters.poolName }}
    dependsOn:
      - getModuleTestFiles
    strategy:
      matrix: $[ dependencies.getModuleTestFiles.outputs['getModuleTestFilesTask.moduleTests'] ]
    ##---------------------------------------------##
    ## TEMPLATE LOGIC                              ##
    ##---------------------------------------------##
    steps:
      # [Agent] Prepare environment
      #----------------------------
      - task: PowerShell@2
        displayName: 'Setup agent for deployment'
        inputs:
          targetType: inline
          pwsh: true
          script: |
            # Load used functions
            . (Join-Path '$(System.DefaultWorkingDirectory)' 'utilities' 'pipelines' 'sharedScripts' 'Set-EnvironmentOnAgent.ps1')

            # Define PS modules to install on the runner
            $Modules = @(
                @{ Name = 'Az.Accounts' },
                @{ Name = 'Az.Resources' },
                @{ Name = 'powershell-yaml'; Version = '0.4.2'}
            )

            # Additional PS modules need to be installed for the removal step in case it is enabled
            if ('${{ parameters.removeDeployment}}' -eq 'true') {
              $Modules += @(
                @{ Name = 'Az.CognitiveServices' },
                @{ Name = 'Az.Compute' },
                @{ Name = 'Az.KeyVault' },
                @{ Name = 'Az.Monitor' },
                @{ Name = 'Az.OperationalInsights' },
                @{ Name = 'Az.RecoveryServices' }
              )
            }

            # Set agent up
            Set-EnvironmentOnAgent -PSModules $Modules

      # [Agent] Replace tokens
      #-----------------------
      - task: AzurePowerShell@5
        displayName: 'Replace tokens in template file via connection [${{ parameters.serviceConnection }}]'
        inputs:
          azureSubscription: ${{ parameters.serviceConnection }}
          azurePowerShellVersion: 'latestVersion'
          preferredAzurePowerShellVersion: ''
          ScriptType: InlineScript
          pwsh: true
          inline: |
            # Load used functions
            . (Join-Path '$(System.DefaultWorkingDirectory)' 'utilities' 'pipelines' 'tokensReplacement' 'Convert-TokensInFileList.ps1')

            # Get Service Principal Object ID
            $context = Get-AzContext
            $servicePrincipalAppId = $context.Account.Id
            $servicePrincipal = Get-AzADServicePrincipal -ApplicationId $servicePrincipalAppId
            $servicePrincipalObjectId = $servicePrincipal.Id

            # Get target files
            $moduleTestFilePath = Join-Path '$(System.DefaultWorkingDirectory)' '$(modulePath)' '$(moduleTestFilePath)'
            $targetFileList = @($moduleTestFilePath)

            # Construct Token Function Input
            $ConvertTokensInputs = @{
                FilePathList = $targetFileList
                Tokens       = @{}
                TokenPrefix  = '$(tokenPrefix)'
                TokenSuffix  = '$(tokenSuffix)'
            }

            # Add enforced tokens
            $ConvertTokensInputs.Tokens += @{
              resourceGroupName = '${{ parameters.resourceGroupName }}'
              subscriptionId    = '${{ parameters.subscriptionId }}'
              managementGroupId = '${{ parameters.managementGroupId }}'
              tenantId          = '$(ARM_TENANT_ID)'
              deploymentSpId    = $servicePrincipalObjectId
            }

            # Add local (source control) tokens
            $tokenMap = @{}
            foreach ($token in (Get-ChildItem env: | Where-Object -Property Name -Like "localToken_*")) {
              $tokenMap += @{ $token.Name.Replace('localToken_','','OrdinalIgnoreCase') = $token.value }
            }
            Write-Verbose ('Using local tokens [{0}]' -f ($tokenMap.Keys -join ', ')) -Verbose
            $ConvertTokensInputs.Tokens += $tokenMap

            # Swap 'namePrefix' token if empty and provided as a Azure DevOps variable
            if([String]::IsNullOrEmpty($ConvertTokensInputs.Tokens['namePrefix'])){
              Write-Verbose 'Using [namePrefix] token from Azure DevOps Variable Groups' -Verbose
              $ConvertTokensInputs.Tokens['namePrefix'] = "$(TOKEN_NAMEPREFIX)"
            }

            # Add custom tokens (passed in via the pipeline)
            if(-not [String]::IsNullOrEmpty('${{ parameters.customParameterFileTokens }}')) {
              $customTokens = '${{ parameters.customParameterFileTokens }}' | ConvertFrom-Json -AsHashTable
              Write-Verbose ('Using custom parameter file tokens [{0}]' -f ($customTokens.Keys -join ', ')) -Verbose
              $ConvertTokensInputs.Tokens += $customTokens
            }

            Write-Verbose "Convert Tokens Input:`n $($ConvertTokensInputs | ConvertTo-Json -Depth 10)" -Verbose

            # Invoke Token Replacement Functionality [For Module]
            $null = Convert-TokensInFileList @ConvertTokensInputs

            # Get target files for modules dependencies
            $DependencyParameterFilePaths = [System.Collections.ArrayList]@()
            $DependencyParameterFolders = Get-ChildItem -Path (Join-Path '$(System.DefaultWorkingDirectory)' 'utilities' 'pipelines' 'dependencies') -Recurse -Filter 'parameters' -Directory
            foreach ($FolderPath in $DependencyParameterFolders.FullName) {
                $DependencyParameterFilePaths += Get-ChildItem -Path $FolderPath -Recurse -Filter '*.json'
            }
            $ConvertTokensInputs.FilePathList = $DependencyParameterFilePaths

            # Invoke Token Replacement Functionality [For Dependencies]
            $null = Convert-TokensInFileList @ConvertTokensInputs

      # [Validation] task(s)
      #---------------------
      # Analyze Azure resources using PSRule for Azure
      - task: ps-rule-assert@2
        displayName: Analyze Azure template files
        inputs:
          modules: 'PSRule.Rules.Azure'
          inputPath: '$(System.DefaultWorkingDirectory)$(modulePath)/$(moduleTestFilePath)'
          outputFormat: NUnit3 # Save results to an NUnit report.
          outputPath: '$(System.DefaultWorkingDirectory)$(modulePath)/$(moduleTestFilePath)-output.xml' # Write NUnit report to '$(System.DefaultWorkingDirectory)$(modulePath)/$(moduleTestFilePath)-output.xml'.

      # Publish NUnit report as test results
      - task: PublishTestResults@2
        displayName: 'Publish PSRule results'
        inputs:
          testRunTitle: 'PSRule' # The title to use for the test run.
          testRunner: NUnit # Import report using the NUnit format.
          testResultsFiles: '$(System.DefaultWorkingDirectory)$(modulePath)/$(moduleTestFilePath)-output.xml' # The previously saved NUnit report.
        condition: succeededOrFailed()
